{
	"info": {
		"_postman_id": "7dd66902-93ef-43eb-b072-bbe42a09af35",
		"name": "HW_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "18848391"
	},
	"item": [
		{
			"name": "/first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Body\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/first",
					"host": [
						"{{url}}"
					],
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "/object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200\r",
							"pm.test(\"Code: 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Проверить, что name в ответе равно name request\r",
							"\r",
							"pm.test(\"name\", function () {\r",
							"    let n_resp = pm.response.json();\r",
							"    pm.expect(n_resp.name).to.eql(\"Dmitry\");\r",
							"});\r",
							"\r",
							"// Проверить, что age в ответе равно age request\r",
							"pm.test(\"age\", function () {\r",
							"    var a = pm.response.json();\r",
							"    pm.expect(a.age).to.eql(\"26\")\r",
							"\r",
							"});\r",
							"\r",
							"// Проверить, что salary в ответе равно salary request\r",
							"pm.test(\"salary\", function () {\r",
							"    var s = pm.response.json();\r",
							"    pm.expect(s.salary).to.eql(2000)\r",
							"})\r",
							"\r",
							"// Спарсить request\r",
							"\r",
							"let reqData = pm.request.url.query.toObject()\r",
							"\r",
							"// Проверить, что name в ответе равно name request\r",
							"pm.test(\"request_name = respone name\", function () {\r",
							"    let n_resp = pm.response.json();\r",
							"    pm.expect(reqData.name).to.eql(n_resp.name);\r",
							"})\r",
							"\r",
							"// Проверить, что age в ответе равно age request\r",
							"pm.test(\"request_age = response age\", function () {\r",
							"    let a_resp = pm.response.json();\r",
							"    pm.expect(reqData.age).to.eql(a_resp.age);\r",
							"})\r",
							"\r",
							"// Проверить, что salary в ответе равно salary request\r",
							"pm.test(\"request_salary = respone salary\", function () {\r",
							"    let s_resp = pm.response.json();\r",
							"    let s_req = reqData;\r",
							"    let request_salary = + s_req.salary\r",
							"    pm.expect(request_salary).to.eql(s_resp.salary);\r",
							"})\r",
							"\r",
							"// Вывести в консоль параметр family из response\r",
							"let f = pm.response.json();\r",
							"console.log(\"resp_family = \", f.family)\r",
							"\r",
							"// Проверить что u_salary_1_5_year в ответе равно salary*4\r",
							"pm.test(\"request_salary = respone salary*4\", function () {\r",
							"    let s_resp = pm.response.json();\r",
							"    let s_req = reqData;\r",
							"    let request_salary = + s_req.salary * 4;\r",
							"    pm.expect(request_salary).to.eql(s_resp.family.u_salary_1_5_year);\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_3?name=Dmitry&age=26&salary=2000",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Dmitry"
						},
						{
							"key": "age",
							"value": "26"
						},
						{
							"key": "salary",
							"value": "2000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/object_info_3 (2)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200\r",
							"pm.test(\"Code: 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Спарсить request\r",
							"\r",
							"let reqData = pm.request.url.query.toObject()\r",
							"\r",
							"// Проверить, что name в ответе равно name request\r",
							"pm.test(\"request_name = respone name\", function () {\r",
							"    let n_resp = pm.response.json();\r",
							"    let n_req = reqData;\r",
							"    pm.expect(n_req.name).to.eql(n_resp.name);\r",
							"})\r",
							"\r",
							"// Проверить, что age в ответе равно age request\r",
							"pm.test(\"request_age = response age\", function () {\r",
							"    let a_resp = pm.response.json();\r",
							"    let a_req = reqData;\r",
							"    pm.expect(a_req.age).to.eql(a_resp.age);\r",
							"})\r",
							"\r",
							"// Проверить, что salary в ответе равно salary request\r",
							"pm.test(\"request_salary = respone salary\", function () {\r",
							"    let s_resp = pm.response.json();\r",
							"    let s_req = reqData;\r",
							"    let request_salary = + s_req.salary;\r",
							"    pm.expect(request_salary).to.eql(s_resp.salary);\r",
							"})\r",
							"\r",
							"// Вывести в консоль параметр family из response\r",
							"let f = pm.response.json();\r",
							"console.log(\"resp_family = \", f.family)\r",
							"\r",
							"// Проверить, что у параметра dog есть параметры name\r",
							"\r",
							"pm.test(\"dog_name\", function () {\r",
							"    let dog_name = pm.response.json();\r",
							"    pm.expect(dog_name.family.pets.dog.hasOwnProperty(\"name\")).to.eql(true);\r",
							"});\r",
							"\r",
							"// Проверить, что у параметра dog есть параметры age\r",
							"\r",
							"pm.test(\"dog_age\", function () {\r",
							"    let dog_age = pm.response.json();\r",
							"    pm.expect(dog_age.family.pets.dog.hasOwnProperty(\"age\")).to.eql(true);\r",
							"});\r",
							"\r",
							"// Проверить, что параметр name имеет значение Luky\r",
							"\r",
							"pm.test(\"name = Luky\", function () {\r",
							"    let dog_name = pm.response.json();\r",
							"    pm.expect(dog_name.family.pets.dog.name).to.eql(\"Luky\");\r",
							"});\r",
							"\r",
							"// Проверить, что параметр age имеет значение 4\r",
							"\r",
							"pm.test(\"age = 4\", function () {\r",
							"    let dog_age = pm.response.json();\r",
							"    pm.expect(dog_age.family.pets.dog.age).to.eql(4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_3?name=Dmitry&age=26&salary=2000",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Dmitry"
						},
						{
							"key": "age",
							"value": "26"
						},
						{
							"key": "salary",
							"value": "2000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200\r",
							"\r",
							"pm.test(\"Code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Спарсить request\r",
							"let reqData = pm.request.url.query.toObject()\r",
							"\r",
							"// Проверить, что name в ответе равно name request\r",
							"pm.test(\"request_name = respone name\", function () {\r",
							"    let n_resp = pm.response.json();\r",
							"    pm.expect(n_resp.name).to.eql(reqData.name);\r",
							"});\r",
							"\r",
							"// Проверить, что age в ответе равно age из request\r",
							"\r",
							"pm.test(\"request_age = respone age\", function () {\r",
							"    let a_resp = pm.response.json();\r",
							"    let a_req = reqData;\r",
							"    let request_age = + a_req.age\r",
							"    pm.expect(request_age).to.eql(a_resp.age);\r",
							"});\r",
							"\r",
							"// Вывести в консоль параметр salary из request\r",
							"    let salary_req = reqData.salary\r",
							"console.log(salary_req);\r",
							"\r",
							"// Вывести в консоль параметр salary из response\r",
							"\r",
							"    let s_resp = pm.response.json();\r",
							"    console.log(s_resp.salary)\r",
							"\r",
							"// Вывести в консоль 0-й элемент параметра salary из response\r",
							"\r",
							"    let s_0_resp = pm.response.json();\r",
							"    console.log(s_0_resp.salary[0]);\r",
							"\r",
							"// Вывести в консоль 1-й элемент параметра salary параметр salary из response\r",
							"\r",
							"    let s_1_resp = pm.response.json();\r",
							"    console.log(s_1_resp.salary[1]);\r",
							"\r",
							"// Вывести в консоль 2-й элемент параметра salary параметр salary из response\r",
							"\r",
							"    let s_2_resp = pm.response.json();\r",
							"    console.log(s_2_resp.salary[2]);\r",
							"\r",
							"// Проверить, что 0-й элемент параметра salary равен salary из request\r",
							"\r",
							"pm.test(\"salary req [0] = salary resp [0] \", function () {\r",
							"    let s_resp = pm.response.json();\r",
							"    let sreqData = parseInt(reqData.salary)\r",
							"    pm.expect(sreqData).to.eql(s_resp.salary[0]);\r",
							"})\r",
							"console.log(\"qwer\",typeof s_resp.salary[0])\r",
							"\r",
							"// Проверить, что 1-й элемент параметра salary равен salary из request\r",
							"\r",
							"pm.test(\"salary req [1] = salary resp [1] \", function () {\r",
							"    let s_resp = pm.response.json();\r",
							"    let sreqData =  parseInt(reqData.salary * 2)\r",
							"    let sresp = parseInt(s_resp.salary[1])\r",
							"    pm.expect(sreqData).to.eql(sresp);\r",
							"});\r",
							"\r",
							"// Проверить, что 2-й элемент параметра salary равен salary*3 из request\r",
							"\r",
							"pm.test(\"salary req [2] = salary resp [2] \", function () {\r",
							"    let s_resp = pm.response.json();\r",
							"    let sreqData = parseInt(reqData.salary * 3)\r",
							"    let sresp = parseInt(s_resp.salary[2])\r",
							"    pm.expect(sreqData).to.eql(sresp);\r",
							"    console.log(\"33333\",s_resp.salary[2])\r",
							"});\r",
							"\r",
							"// Написать цикл который выведет в консоль по порядку элементы списка из параметра salary\r",
							"\r",
							"    let sa = pm.response.json();\r",
							"    for (let salary = 0; salary < sa.salary.length; salary += 1) {\r",
							"    console.log(\"array\",sa.salary[salary])};"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_4?name=Dmitry&age=26&salary=2000",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Dmitry"
						},
						{
							"key": "age",
							"value": "26"
						},
						{
							"key": "salary",
							"value": "2000"
						}
					]
				}
			},
			"response": []
		}
	]
}